plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example.kh'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'io.springfox:springfox-swagger-ui:2.9.2'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.projectlombok:lombok:1.18.22' // 최신 버전으로 업데이트 가능
	annotationProcessor 'org.projectlombok:lombok:1.18.22'

	// JWT
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.2'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.2'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// 이메일 인증
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// 문자인증
	implementation 'net.nurigo:sdk:4.3.0'

}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
}



def reactDir = "$projectDir/src/main/react" // 리액트 디렉토리

sourceSets { // 리액트 디렉토리를 리소스 디렉토리로 설정
	main {
		resources {
			srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" } // 리액트 빌드 파일들을 복사해준다.

task installReact(type: Exec) { // 리액트 설치
	workingDir "$reactDir"
	inputs.dir "$reactDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) { // 윈도우일 경우
		commandLine "yarn.cmd", "audit", "fix"
		commandLine 'yarn.cmd', 'install'
	} else { // 윈도우가 아닐 경우
		commandLine "yarn", "audit", "fix"
		commandLine 'yarn', 'install'
	}
}

task buildReact(type: Exec) { // 리액트 빌드
	dependsOn "installReact" // 리액트 설치가 끝나야 빌드를 할 수 있도록 설정
	workingDir "$reactDir" // 리액트 디렉토리에서 실행
	inputs.dir "$reactDir" // 리액트 디렉토리를 입력으로 받음
	group = BasePlugin.BUILD_GROUP // 그룹 설정
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "yarn.cmd", "run", "build"
	} else {
		commandLine "yarn", "run", "build"
	}
}

task copyReactBuildFiles(type: Copy) { // 리액트 빌드 파일들을 복사해준다.
	dependsOn "buildReact" // 리액트 빌드가 끝나야 복사를 할 수 있도록 설정
	from "$reactDir/build" // 리액트 빌드 디렉토리에서
	into "$projectDir/src/main/resources/static" // 스프링 리소스 디렉토리로
}
jar { // jar 파일에 리액트 빌드 파일들을 포함시킨다.
	enabled = false // 기본 jar 파일 생성을 끈다.
}

